{
  "description": "Represents a projected volume source",
  "type": "object",
  "properties": {
    "defaultMode": {
      "description": "defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
      "type": "integer",
      "format": "int32"
    },
    "sources": {
      "description": "sources is the list of volume projections",
      "type": "array",
      "items": {
        "description": "Projection that may be projected along with other supported volume types",
        "type": "object",
        "properties": {
          "configMap": {
            "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
            "type": "object",
            "properties": {
              "items": {
                "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                "type": "array",
                "items": {
                  "description": "Maps a string key to a path within a volume.",
                  "type": "object",
                  "required": [
                    "key",
                    "path"
                  ],
                  "properties": {
                    "key": {
                      "description": "key is the key to project.",
                      "type": "string"
                    },
                    "mode": {
                      "description": "mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "path": {
                      "description": "path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                      "type": "string"
                    }
                  }
                }
              },
              "name": {
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                "type": "string"
              },
              "optional": {
                "description": "optional specify whether the ConfigMap or its keys must be defined",
                "type": "boolean"
              }
            }
          },
          "downwardAPI": {
            "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
            "type": "object",
            "properties": {
              "items": {
                "description": "Items is a list of DownwardAPIVolume file",
                "type": "array",
                "items": {
                  "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
                  "type": "object",
                  "required": [
                    "path"
                  ],
                  "properties": {
                    "fieldRef": {
                      "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
                      "type": "object",
                      "required": [
                        "fieldPath"
                      ],
                      "properties": {
                        "apiVersion": {
                          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                          "type": "string"
                        },
                        "fieldPath": {
                          "description": "Path of the field to select in the specified API version.",
                          "type": "string"
                        }
                      },
                      "x-kubernetes-map-type": "atomic"
                    },
                    "mode": {
                      "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "path": {
                      "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                      "type": "string"
                    },
                    "resourceFieldRef": {
                      "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
                      "type": "object",
                      "required": [
                        "resource"
                      ],
                      "properties": {
                        "containerName": {
                          "description": "Container name: required for volumes, optional for env vars",
                          "type": "string"
                        },
                        "divisor": {
                          "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n``` <quantity>        ::= <signedNumber><suffix>\n\n\t(Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n\n\t(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n\n\t(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber> ```\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n\n- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.\n\nThe sign will be omitted unless the number is negative.\n\nExamples:\n\n- 1.5 will be serialized as \"1500m\" - 1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
                          "type": "string"
                        },
                        "resource": {
                          "description": "Required: resource to select",
                          "type": "string"
                        }
                      },
                      "x-kubernetes-map-type": "atomic"
                    }
                  }
                }
              }
            }
          },
          "secret": {
            "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
            "type": "object",
            "properties": {
              "items": {
                "description": "items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                "type": "array",
                "items": {
                  "description": "Maps a string key to a path within a volume.",
                  "type": "object",
                  "required": [
                    "key",
                    "path"
                  ],
                  "properties": {
                    "key": {
                      "description": "key is the key to project.",
                      "type": "string"
                    },
                    "mode": {
                      "description": "mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "path": {
                      "description": "path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                      "type": "string"
                    }
                  }
                }
              },
              "name": {
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                "type": "string"
              },
              "optional": {
                "description": "optional field specify whether the Secret or its key must be defined",
                "type": "boolean"
              }
            }
          },
          "serviceAccountToken": {
            "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).",
            "type": "object",
            "required": [
              "path"
            ],
            "properties": {
              "audience": {
                "description": "audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
                "type": "string"
              },
              "expirationSeconds": {
                "description": "expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
                "type": "integer",
                "format": "int64"
              },
              "path": {
                "description": "path is the path relative to the mount point of the file to project the token into.",
                "type": "string"
              }
            }
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/schema#"
}