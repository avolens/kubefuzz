"use strict";(self.webpackChunkkubefuzz=self.webpackChunkkubefuzz||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Building and Installing","href":"/docs/intro","docId":"intro"},{"type":"link","label":"Overview","href":"/docs/overview","docId":"overview"},{"type":"link","label":"Get-schmas mode","href":"/docs/get-schemas","docId":"get-schemas"},{"type":"link","label":"Constraints","href":"/docs/constraints","docId":"constraints"},{"type":"link","label":"Generation mode","href":"/docs/generate","docId":"generate"},{"type":"link","label":"Mutation mode","href":"/docs/mutate","docId":"mutate"},{"type":"link","label":"Fuzzing mode","href":"/docs/fuzz","docId":"fuzz"},{"type":"link","label":"Tipps","href":"/docs/tipps","docId":"tipps"}]},"docs":{"constraints":{"id":"constraints","title":"Constraints","description":"Kubefuzz does not blindly generate resources based on their specs (but you could configure it that way) but rather follows a constraint that the user","sidebar":"tutorialSidebar"},"fuzz":{"id":"fuzz","title":"Fuzzing mode","description":"Fuzzing mode combines mutation and generation in a loop to test the K8s admission controller chain by reading the feedbacak","sidebar":"tutorialSidebar"},"generate":{"id":"generate","title":"Generation mode","description":"In generation mode KubeFuzz will generate random resources according to the user supplied constraint:","sidebar":"tutorialSidebar"},"get-schemas":{"id":"get-schemas","title":"Get-schmas mode","description":"In order for KubeFuzz to be able to work with the resources existent your cluster, it needs to know their basic structure. This includes for example required fields and value formats. With this knowledge, Kubefuzz can smartly generate random resources that still comply with the resource definition in a syntactic and semantic correct way (see known issues for edge cases).","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Building and Installing","description":"First clone the repo and cd into it:","sidebar":"tutorialSidebar"},"mutate":{"id":"mutate","title":"Mutation mode","description":"In mutation mode KubeFuzz will mutate existing resources according to the user supplied constraint:","sidebar":"tutorialSidebar"},"overview":{"id":"overview","title":"Overview","description":"Kubefuzz is a generative and mutative fuzzer for Kubernetes admission controller chains. It can be used to uncover unexpected behavior in complex admission controller setups. It works by generating and mutating Kubernetes resources according to the schema supplied by the cluster openapi scheme, and a user written constrain configuration that further limits what fields are generated and how.","sidebar":"tutorialSidebar"},"tipps":{"id":"tipps","title":"Tipps","description":"To make fuzzing more effective there are some things you might want to be careful about.","sidebar":"tutorialSidebar"}}}')}}]);