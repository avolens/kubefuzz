"use strict";(self.webpackChunkkubefuzz=self.webpackChunkkubefuzz||[]).push([[983],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6626:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(4137));const i={sidebar_position:4},o="Constraints",s={unversionedId:"constraints",id:"constraints",title:"Constraints",description:"Kubefuzz does not blindly generate resources based on their specs (but you could configure it that way) but rather follows a constraint that the user",source:"@site/docs/constraints.md",sourceDirName:".",slug:"/constraints",permalink:"/docs/constraints",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Get-schmas mode",permalink:"/docs/get-schemas"},next:{title:"Generation mode",permalink:"/docs/generate"}},l={},u=[{value:"General format",id:"general-format",level:2},{value:"Required fields",id:"required-fields",level:3},{value:"Field array",id:"field-array",level:3},{value:"Path, regex and required",id:"path-regex-and-required",level:4},{value:"Values, regex_values and values_mode",id:"values-regex_values-and-values_mode",level:4},{value:"Minmax",id:"minmax",level:4},{value:"Remove",id:"remove",level:4}],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"constraints"},"Constraints"),(0,a.kt)("p",null,"Kubefuzz does not blindly generate resources based on their specs (but you could configure it that way) but rather follows a constraint that the user\ncan supply, allowing fine grained control over which fields are generated and how"),(0,a.kt)("p",null,"Generally, constraining works in a allow listing fashion. Every path that is not explicitly stated, is not generated (but every subpath of a specified\npath ",(0,a.kt)("em",{parentName:"p"},"is")," generated, if not otherwise explicitly disallowed)"),(0,a.kt)("p",null,"Constraints are created using a specific format which will be described here. One constraint configuration per resource type is required."),(0,a.kt)("h2",{id:"general-format"},"General format"),(0,a.kt)("p",null,"Constraint configurations can be written in yaml or json. This guide will use yaml. Up front, here is an example constraint configuration for ",(0,a.kt)("inlineCode",{parentName:"p"},"core.v1.Pod")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'gvk: ".v1.Pod" # what resources are we operating on? (group.version.kind)\n\nfields:\n- "$.spec.containers.securityContext" # simple paths without any extras, just the path as a string\n\n- path: "$.spec.containers"\n  minmax: [1,3] # 1 to 3 containers will be generated, only works on arrays\n\n- path: "$.spec.containers.name"\n  required: true # will always be generated\n\n- path: "$.spec.containers.securityContext.seccompProfile.localhostProfile"\n  remove: true\n\n- path: .*\\.containers\\..*gmsaCredentialSpecName # applies to every path matching this regex\n  regex: true # dont forget to declare this path entry as a regex\n  values: # every occurence of this field will have a value of either static or abc\n    - "static"\n    - "abc"\n  values_mode: override # if there is an enum present (preset of possible values), override\n\n- path: "$.spec.containers.image"\n  required: true\n  regex_values:  # values can also be randomly generated by a regex\n    - "regex-img-name-[a-Z]{3}\\d{3}"\n    - "a-second-regex"\n\n# every generated pod is guaranteed to\n# 1. have every container have a securitycontext\n# 2. have .privileged set to true\n- path: "$.spec.containers.securityContext.privileged"\n  values:\n  - true\n  required: true\n')),(0,a.kt)("h3",{id:"required-fields"},"Required fields"),(0,a.kt)("p",null,"You need to at least set the ",(0,a.kt)("inlineCode",{parentName:"p"},"gvk")," and one entry in the fields array in order for KubeFuzz to work. The ",(0,a.kt)("inlineCode",{parentName:"p"},"gvk"),"\nspecifies which resource to apply the constraint to. Note in the above example, the resource is ",(0,a.kt)("inlineCode",{parentName:"p"},"core.v1.pod"),"\nbut the ",(0,a.kt)("inlineCode",{parentName:"p"},"core")," group is actually implicitly set."),(0,a.kt)("h3",{id:"field-array"},"Field array"),(0,a.kt)("p",null,"The field array contains a list of configurations that apply to one or multiple (if its a regex path) fields per item. Right up front, here are all possible fields for one such item in the array:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct FieldConfig {\n    pub path: String,\n    pub values: Option<Vec<serde_yaml::Value>>,\n    pub regex_values: Option<Vec<String>>,\n    pub values_mode: Option<ValuesMode>,\n    pub required: bool,\n    pub minmax: Option<(usize, usize)>,\n    pub remove: bool,\n    pub regex: bool,\n}\n")),(0,a.kt)("h4",{id:"path-regex-and-required"},"Path, regex and required"),(0,a.kt)("p",null,"If you just want to enable a field to be generated, you can also just pass the field path instead of the fieldconfig object, as seen in the first entry in the example constraint. Note that by default, the path ",(0,a.kt)("em",{parentName:"p"},"may")," be generated, but it can also be missing. To force the field to be present every time, set ",(0,a.kt)("inlineCode",{parentName:"p"},"required")," to true"),(0,a.kt)("p",null,"Paths may also be a regex. This way you can match multiple paths. Be sure to set ",(0,a.kt)("inlineCode",{parentName:"p"},"regex")," to true in this case. Kubefuzz will throw an error if a path does not exist or a regex doesn't match a single path."),(0,a.kt)("h4",{id:"values-regex_values-and-values_mode"},"Values, regex_values and values_mode"),(0,a.kt)("p",null,"For some fields you may wish to generate more specific values than just type conform ones (like generic string,int etc). This can be done with ",(0,a.kt)("inlineCode",{parentName:"p"},"values")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"regex_values"),". Both are arrays from which KubeFuzz is going to randomly chose to set a value. For ",(0,a.kt)("inlineCode",{parentName:"p"},"values"),", you are free to supply any type, also full fledged objects. ",(0,a.kt)("inlineCode",{parentName:"p"},"regex_values")," is an array of regex strings. Lastly, add ",(0,a.kt)("inlineCode",{parentName:"p"},"values_mode")," to specify the behavior of KubeFuzz if there is an already existing enum at the fields place, possible values are ",(0,a.kt)("inlineCode",{parentName:"p"},"override")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"add"),"."),(0,a.kt)("h4",{id:"minmax"},"Minmax"),(0,a.kt)("p",null,"Minmax is an array with two elements, representing the minimum and maximum number of array elements for arrays."),(0,a.kt)("h4",{id:"remove"},"Remove"),(0,a.kt)("p",null,'If set to true, the path is explicitly removed. This can be useful if you want to generate a whole subtree like "\\$.spec.containers" but now want to exclude "\\$.spec.containers.resources"'))}d.isMDXComponent=!0}}]);